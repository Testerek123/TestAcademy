2023-10-21 container depot (use objects to store their state)

<task8>
Create the program that allows you to load coloured containers on the ship.
For simplicity containers can have three colors: red, white, blue
Each container loaded on the ship should have unique ID
There is unlimited number of containers available to load
Maximum number of containers on the ship is 9.

Sample input:

Chose your action:
1. Load container on the ship (select container color in next step 1.1)
2. List containers with their ID's  already loaded on the ship
3. Display number of containers loaded
4. Exit program

> 2

Sample output:

3 containers are loaded on the ship:

1. Container ID = 002, Container color = red
2. Container ID = 030, Container color = red
3. Container ID = 100, Container color = blue

Chose your action:
1. Load container on the ship (select container color in next step 1.1)
2. List containers with their ID's  already loaded on the ship
3. Display number of containers loaded
4. Exit program

Sample input:

> 1

What color container do you want to load? ( red, white, blue ):
> red

Sample output:

Container loaded.

Chose your action:
1. Load container on the ship (select container color in next step 1.1)
2. List containers with their ID's  already loaded on the ship
3. Display number of containers loaded
4. Exit program

</task8>




2023-09-26 expand on two dimensional array rotation

<task7>
rotate array like in <task6> except by 90, 180, 270 degrees
so now input consists of
- the two numbers n and m, not exceeding 100,
- an array n×m in size (elements not exceeding 100)
- degrees to rotate array: 90, 180, 270

Sample Input:
3 4
11 12 13 14
21 22 23 24
31 32 33 34
90

Sample Output:
31 21 11
32 22 12
33 23 13
34 24 14
</task7>


2023-09-14 two dimensional array

<task6>
Given a rectangle array of integers  n×m in size.
Rotate it by 90 degrees clockwise,
and record the result into the new array of integers m×n in size.

Input consists of the two numbers n and m, not exceeding 100,
and then an array n×m in size (elements not exceeding 100).

Output the resulting array. Separate numbers by a single space in the output.

Sample Input:
3 4
11 12 13 14
21 22 23 24
31 32 33 34

Sample Output:
31 21 11
32 22 12
33 23 13
34 24 14

</task6>

2023-09-11 List

<task5>
read iteger number 'n' from prompt
0 <= n <= 1000000

find the tens digit and print out result

examples:
if number = 1432, the tens digit = 3
if number = 265, the tens digit = 6
if number = 102, the tens digit = 0

if user inputs invalid input
- then pront warning and ask for input again
- or user can terminate program by typing '1000001'

</task5>




2023-08-29 switch statement

<task 4>
lets elaborate on task 3:

1.prompt user for a number can be from 1 to 9 (inclusive).
2. instead of finishing the program prompt user for a number again and again until user enters following text "stop this!"
3. do not stop the program if input is invalid
4. allow user to enter lower case or upper case or mixed input (make it case agnostic)
5. if user enters "stop this!" print: "I thought you'll never ask."   and end program.

</task 4>

2023-08-29 switch statement

<task 3>
Write a program that reads a string from the standard input
and outputs the number.
A number can be from 1 to 9 (inclusive).
using "switch" statement is a plus.

Sample Input:
one

Sample Output:
1

Sample Input:
seven

Sample Output:
7
</task 3>

2023-09-01 prom[


2023-08-29 switch statement

<task 3>
Write a program that reads a string from the standard input
and outputs the number.
A number can be from 1 to 9 (inclusive).
using "switch" statement is a plus.

Sample Input:
one

Sample Output:
1

Sample Input:
seven

Sample Output:
7
</task 3>

2023-08-17 enum +

Let's expand on task 1:

<task 2>
Prompt user to input any name of the week in uppercase:
- ex. prompt = "enter name of the week in uppercase:"
- ex. entry = "FRIDAY"

now print days of the week to the console starting from the day user provided.
if user enters incorrect name print warning message "invalid name of the day of the week" and end program

- ex. output =
FRIDAY
SATURDAY
SUNDAY
MONDAY
TUESDAY
WEDNESDAY
THURSDAY

</task 2>

2023-08-15 enum

In Java, an enum (short for "enumeration") is a special data type
that is used to define a set of named constant values.
Enums can be useful for representing a fixed set of related values,
such as days of the week, colors, states, types, models

Since an enum is a special class type in Java,
we can add constructors, fields, and methods to it.
Thus, it is possible to enhance our enum to include the values we need.
The values of the constants are defined when we declare the enum.

<task 1>

Declare an enum named DayOfWeek.
It should include all days of the week in uppercase: SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY.

Print days of the week to the console
each day in new line

</task 1>